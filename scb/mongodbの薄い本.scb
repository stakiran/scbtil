https://www.cuspy.org/diary/2012-04-17/the-little-mongodb-book-ja.pdf

with 6.0.3

演習用データ
 code:data
  db.unicorns.insert({name: 'Horny', dob: new Date(1992,2,13,7,47), loves: ['carrot','papaya'], weight: 600,gender: 'm', vampires: 63});
  db.unicorns.insert({name: 'Aurora', dob: new Date(1991, 0, 24, 13, 0), loves: ['carrot', 'grape'], weight: 450, gender: 'f', vampires: 43});
  db.unicorns.insert({name: 'Unicrom', dob: new Date(1973, 1, 9, 22, 10), loves: ['energon', 'redbull'], weight: 984, gender: 'm', vampires: 182});
  db.unicorns.insert({name: 'Roooooodles', dob: new Date(1979, 7, 18, 18, 44), loves: ['apple'], weight: 575, gender: 'm', vampires: 99});
  db.unicorns.insert({name: 'Solnara', dob: new Date(1985, 6, 4, 2, 1), loves:['apple', 'carrot', 'chocolate'], weight:550, gender:'f', vampires:80});
  db.unicorns.insert({name:'Ayna', dob: new Date(1998, 2, 7, 8, 30), loves: ['strawberry', 'lemon'], weight: 733, gender: 'f', vampires: 40});
  db.unicorns.insert({name:'Kenny', dob: new Date(1997, 6, 1, 10, 42), loves: ['grape', 'lemon'], weight: 690, gender: 'm', vampires: 39});
  db.unicorns.insert({name: 'Raleigh', dob: new Date(2005, 4, 3, 0, 57), loves: ['apple', 'sugar'], weight: 421, gender: 'm', vampires: 2});
  db.unicorns.insert({name: 'Leia', dob: new Date(2001, 9, 8, 14, 53), loves: ['apple', 'watermelon'], weight: 601, gender: 'f', vampires: 33});
  db.unicorns.insert({name: 'Pilot', dob: new Date(1997, 2, 1, 5, 3), loves: ['apple', 'watermelon'], weight: 650, gender: 'm', vampires: 54});
  db.unicorns.insert({name: 'Nimue', dob: new Date(1999, 11, 20, 16, 15), loves: ['grape', 'carrot'], weight: 540, gender: 'f'});
  db.unicorns.insert({name: 'Dunx', dob: new Date(1976, 6, 18, 18, 18), loves: ['grape', 'watermelon'], weight: 704, gender: 'm', vampires: 165});
 :c

database
 collection
  document
   field

find
 db.unicorns.find({gender: 'm', weight: {$gt: 700}})
 db.unicorns.find({loves: 'watermelon'})
 https://www.mongodb.com/docs/manual/reference/operator/query/#query-selectors
 表示フィールドのフィルタ(projection)
  db.unicorns.find({loves: 'watermelon'}, {name: 1, _id: 0})
 sort
  db.unicorns.find().sort({name: 1, vampires: -1})
  1が昇順で、-1が降順
 paging
  db.unicorns.find().sort({weight: -1}).limit(2).skip(1)
   >2番目と3番目に重たいユニコーン
   上位2件を出しているが、skipで1番目を省いてるので2,3番目🐰
 count
  db.unicorns.find({vampires: {$gt: 50}}).count()

update
 updateコマンド使えない
  https://stackoverflow.com/questions/38883285/error-the-update-operation-document-must-contain-atomic-operators-when-running
  replaceOne
 db.unicorns.replaceOne({name: 'Roooooodles'}, {weight: 590})
  でもこれは危ない。ドキュメント全体を第二引数で置き換えることになる
 db.unicorns.update({name: 'Roooooodles'}, {$set: {weight: 590}})
  更新演算子 $set
  フィールドに対して作用するので、ドキュメントが消えるおそれはない

更新演算子
 $set
  db.unicorns.update({name: 'Roooooodles'}, {$set: {weight: 590}})
 $push
  db.unicorns.update({name: 'Aurora'}, {$push: {loves: 'sugar'}})
 $inc
  db.unicorns.update({name: 'Pilot'}, {$inc: {vampires: -2}})
 https://www.mongodb.com/docs/manual/reference/operator/update/#update-operators

upsert
 なければinsert、あればupdate
 ❌db.hits.update({page: 'unicorns'}, {$inc: {hits: 1}});
 🔴db.hits.update({page: 'unicorns'}, {$inc: {hits: 1}}, {upsert:true});

updateのmulti(複数同時更新)
 db.unicorns.update({}, {$set: {vaccinated: true }});
  これだと最初にマッチした1documentしか更新されない
 db.unicorns.update({}, {$set: {vaccinated: true }}, {multi:true});
  multi trueでall document

データモデリング
 mongoにはjoinが無い
  代案1 フィールドにドキュメントを入れる
   RDBではフィールドに1つのスカラー値しか入れられないので、テーブルがどうしても分かれる
   mongoではフィールドにドキュメントも入れられるので、必要な値がドキュメント一箇所に集まる
   あとはfindで見つければいい
   クエリ時に結合するのではなく、データ側で最初からまとめて入れておけるって話？🐰
  代案2 非正規化
   RDBでは必要な情報はjoinする（外部キーの値を使って別テーブルから取ってきて結合する）
   mongoでは最初からドキュメントに入れておくことができる
    たとえばuseridとusernameは、普通はテーブルを分けるが、username使うから`(userid, username)`にしちゃうか、みたいなこともできる
    ただしこの場合、usernameの修正が入ったら、フィールドの値全部も再修正が要る
 使い分けのヒント
  ドキュメントサイズは16MBまで
  たいていは親と一緒にほしい小さなデータを埋めることになるはず
   >埋め込みドキュメントは頻繁に利用されますが、ほとんどの場合親ドキュメントと同時に取得したい小さなデータです。
   ユーザー情報に住所`{street: "229 W. 43rd St", city: "New York", state:"NY",zip:"10036"}`を埋め込む例が載ってる🐰
  RDBのテーブルの多くは、mongoのコレクションで置き換えることができる
  mongoのコレクションは、おそらくRDBのテーブルよりは少なくて済む
  ドキュメントを埋め込みつつ、別にコレクションをつくるというハイブリッドもできる
   >posts コレクションと comments コレクションを別々に持つべきか、postドキュメントにコメントの配列を埋め込むべきでしょうか?
   >MongoDB の柔軟なスキーマはこの 2 つのアプローチを組み合わせて、別々のコレクションに分けたまま、少ない数のコメントを投稿に埋め込む事が出来ます。これは 1 回のクエリーで欲しいデータをまとめて取得するという原則に従っています。
   コメントが10以下ならpostsに埋め込んで、10超えたらcommentsに移そう、みたいなことができるわけか🐰
 なるほど
  下手にテーブル（コレクション）分けるのが正義ではない、と

next
 5
